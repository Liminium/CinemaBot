import asyncio
import os

from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import AiogramError
from aiogram.types import Message
from aiogram.types import BotCommand
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.fsm. context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db import (init_db, add_user, log_query, get_user_history, get_favorites,
                add_to_favorites, remove_from_favorites, get_user_stats)

from request_films import search_movie

load_dotenv()

bot = Bot(token=os.environ['BOT_API'])
dp = Dispatcher()


# –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class RemoveFavoriteStates(StatesGroup):
    waiting_for_fav_title = State()


@dp.message(Command("start"))
async def start_cmd(msg: Message):
    await add_user(msg.from_user.id)
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä üîç")


@dp.message(Command("help"))
async def help_cmd(msg: Message):
    await msg.answer("üë®‚Äçüíª –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n12 c—Ç—É–ª—å–µ–≤\n–í–µ–Ω–æ–º\n\n–ö–æ–º–∞–Ω–¥—ã:\n"
                     "/start ‚Äî –Ω–∞—á–∞—Ç—å\n/help ‚Äî –ø–æ–º–æ—â—å\n/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å–º–∞–º")


@dp.message(Command("history"))
async def history_cmd(msg: Message):
    history = await get_user_history(msg.from_user.id)
    if not history:
        await msg.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    text = "\n".join(f"üî∏ {q} ‚Üí {title}" for q, title in reversed(history[-10:]))
    await msg.answer(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤:\n{text}")


@dp.message(Command('get_favorites'))
async def get_favorites_cmd(msg: Message):
    favorites = await get_favorites(msg.from_user.id)
    if not favorites:
        await msg.answer("–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç.")
        return
    text = "\n".join(f"{num + 1}) {film}" for (num, film) in enumerate(favorites[::-1]))
    await msg.answer(f"‚≠ê –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö:\n{text}")


@dp.message(Command('add_favorite'))
async def add_favorites_cmd(msg: Message):
    last = (await get_user_history(msg.from_user.id))[-1][1]
    result = await add_to_favorites(msg.from_user.id, last)
    if result:
        await msg.answer(f"‚≠ê –§–∏–ª—å–º ¬´{last}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö!")
    else:
        await msg.answer(f"‚ö†Ô∏è –§–∏–ª—å–º ¬´{last}¬ª —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö!")



@dp.message(Command("remove_favorite"))
async def ask_fav_title(message: Message, state: FSMContext):
    await message.answer("‚åõ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:")
    await state.set_state(RemoveFavoriteStates.waiting_for_fav_title)


@dp.message(RemoveFavoriteStates.waiting_for_fav_title)
async def remove_fav_by_title(message: Message, state: FSMContext):
    user_id = message.from_user.id
    title = message.text.strip()

    removed = await remove_from_favorites(user_id, title)

    if removed:
        await message.answer(f"‚ùå –§–∏–ª—å–º ¬´{title}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
    else:
        await message.answer(f"‚ö†Ô∏è –§–∏–ª—å–º ¬´{title}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.")
    await state.clear()


@dp.message(Command("stats"))
async def stats_cmd(msg: Message):
    stats = await get_user_stats(msg.from_user.id)
    if not stats:
        await msg.answer("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    text = "\n".join(f"üé¨ {title} ‚Äî {count} —Ä–∞–∑" for title, count in stats[:10])
    await msg.answer(f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{text}")


@dp.message(F.text)
async def movie_search(msg: Message):
    await add_user(msg.from_user.id)
    query = msg.text.strip()

    loading_message = await msg.answer(f'–ò—â—É ¬´{query}¬ª... üîç')

    result = await search_movie(query)
    if not result:
        await bot.delete_message(msg.chat.id, loading_message.message_id)
        await msg.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")
        return

    title, year, rating_1, rating_2, poster, desc, links = result

    await log_query(msg.from_user.id, query, title)

    if desc:
        desc = f"\n\n{desc}"
    year = f", {year}"

    text = f"üé¨ {title}{year}\n\n‚≠êÔ∏è IMDB: {rating_1}\n‚≠ê –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {rating_2}{desc}\n\n{links}"

    if len(text) > 1024:  # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        desc = desc[:1021 - len(text)]
        desc += '...'

    text = f"üé¨ {title}{year}\n\n‚≠êÔ∏è IMDB: {rating_1}\n‚≠ê –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {rating_2}{desc}\n\n{links}"

    await bot.delete_message(msg.chat.id, loading_message.message_id)

    try:
        if poster and poster != "N/A":
            await msg.answer_photo(photo=poster, caption=text)
        else:
            await msg.answer(text)
    except AiogramError as e:
        import urllib
        print(e)
        await msg.answer(text)


async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="/help", description="‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand(command="/start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/history", description="üïò –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"),
        BotCommand(command="/stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
        BotCommand(command="/get_favorites", description="‚≠ê –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"),
        BotCommand(command="/add_favorite", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–ª—å–º"),
        BotCommand(command="/remove_favorite", description="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
    ]
    await bot.set_my_commands(commands)


async def main():
    await init_db()
    await set_bot_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
